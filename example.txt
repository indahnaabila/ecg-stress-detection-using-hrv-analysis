unit Unit1;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, ComCtrls, TeEngine, Series, ExtCtrls, TeeProcs, Chart,
  Math;

type
  TForm1 = class(TForm)
    PageControl1: TPageControl;
    TabSheet1: TTabSheet;
    GroupBox1: TGroupBox;
    Label1: TLabel;
    Label2: TLabel;
    Edit1: TEdit;
    Edit2: TEdit;
    Button1: TButton;
    GroupBox2: TGroupBox;
    GroupBox3: TGroupBox;
    Chart1: TChart;
    Button2: TButton;
    OpenDialog1: TOpenDialog;
    TabSheet2: TTabSheet;
    Chart3: TChart;
    Series3: TLineSeries;
    Edit3: TEdit;
    RadioButton1: TRadioButton;
    RadioButton2: TRadioButton;
    Label3: TLabel;
    Edit4: TEdit;
    Button3: TButton;
    Chart4: TChart;
    Series4: TLineSeries;
    Series1: TBarSeries;
    GroupBox4: TGroupBox;
    GroupBox5: TGroupBox;
    Chart7: TChart;
    Series5: TLineSeries;
    Chart8: TChart;
    Series6: TLineSeries;
    GroupBox6: TGroupBox;
    Chart9: TChart;
    Series7: TLineSeries;
    Series8: TLineSeries;
    Series9: TLineSeries;
    Series10: TLineSeries;
    Series11: TLineSeries;
    Chart10: TChart;
    Series12: TBarSeries;
    Chart11: TChart;
    Series13: TBarSeries;
    Chart12: TChart;
    Series14: TBarSeries;
    Chart13: TChart;
    Series15: TBarSeries;
    PageControl2: TPageControl;
    TabSheet3: TTabSheet;
    TabSheet4: TTabSheet;
    Chart2: TChart;
    Series2: TBarSeries;
    Chart5: TChart;
    Series16: TBarSeries;
    Chart6: TChart;
    BarSeries1: TBarSeries;
    Chart14: TChart;
    Series17: TLineSeries;
    Chart15: TChart;
    Series18: TLineSeries;
    Chart16: TChart;
    Series19: TLineSeries;
    Chart17: TChart;
    Series20: TLineSeries;
    Chart18: TChart;
    Series21: TLineSeries;
    TabSheet5: TTabSheet;
    Series22: TLineSeries;
    Series23: TLineSeries;
    Series24: TLineSeries;
    Series25: TLineSeries;
    Series26: TLineSeries;
    Chart19: TChart;
    Series27: TLineSeries;
    Chart20: TChart;
    Series28: TLineSeries;
    Chart21: TChart;
    Series29: TLineSeries;
    Chart22: TChart;
    Series30: TLineSeries;
    Chart23: TChart;
    Series31: TLineSeries;
    Chart24: TChart;
    Series32: TLineSeries;
    TabSheet6: TTabSheet;
    Chart25: TChart;
    LineSeries1: TLineSeries;
    Label4: TLabel;
    Edit5: TEdit;
    Label5: TLabel;
    Edit6: TEdit;
    Label6: TLabel;
    Edit7: TEdit;
    Label7: TLabel;
    Edit8: TEdit;
    Label8: TLabel;
    Edit9: TEdit;
    Label9: TLabel;
    Edit10: TEdit;
    Label10: TLabel;
    Label11: TLabel;
    Label12: TLabel;
    Label13: TLabel;
    Edit11: TEdit;
    Edit12: TEdit;
    Edit13: TEdit;
    Edit14: TEdit;
    Series35: TLineSeries;
    Series36: TLineSeries;
    Series37: TLineSeries;
    Series33: TLineSeries;
    Series44: TLineSeries;
    Series45: TLineSeries;
    Series46: TLineSeries;
    Series34: TLineSeries;
    Series47: TLineSeries;
    Series48: TLineSeries;
    Series49: TLineSeries;
    Series50: TLineSeries;
    Series51: TLineSeries;
    Series52: TLineSeries;
    Series53: TLineSeries;
    Series54: TLineSeries;
    Series55: TLineSeries;
    Series56: TLineSeries;
    TabSheet7: TTabSheet;
    Chart31: TChart;
    Series57: TLineSeries;
    Chart32: TChart;
    Series58: TLineSeries;
    Chart33: TChart;
    Series59: TLineSeries;
    Chart34: TChart;
    Series60: TLineSeries;
    Chart35: TChart;
    Series61: TLineSeries;
    Series64: TLineSeries;
    Series65: TLineSeries;
    Series66: TLineSeries;
    Series67: TLineSeries;
    Series68: TLineSeries;
    TabSheet8: TTabSheet;
    TabSheet9: TTabSheet;
    Chart37: TChart;
    Series69: TLineSeries;
    Chart38: TChart;
    Chart39: TChart;
    Chart40: TChart;
    Series70: TLineSeries;
    Series71: TLineSeries;
    Series72: TLineSeries;
    Chart41: TChart;
    Series74: TLineSeries;
    Chart42: TChart;
    Series75: TLineSeries;
    lnsrsSeries78: TLineSeries;
    lnsrsSeries79: TLineSeries;
    lnsrsSeries38: TLineSeries;
    TabSheet10: TTabSheet;
    Chart27: TChart;
    Series39: TLineSeries;
    Series40: TLineSeries;
    Series41: TLineSeries;
    Series42: TLineSeries;
    Series43: TLineSeries;
    Series78: TLineSeries;
    Series79: TLineSeries;
    Series80: TLineSeries;
    Series81: TLineSeries;
    Series82: TLineSeries;
    Series83: TLineSeries;
    Chart28: TChart;
    Series62: TLineSeries;
    Chart29: TChart;
    Series63: TLineSeries;
    Series73: TLineSeries;
    Chart30: TChart;
    Series76: TLineSeries;
    Series77: TLineSeries;
    Series84: TLineSeries;
    function Dirac(x:Integer):Integer;

    procedure koef_filter_hg;
    procedure respon_frekuensi_hg;
    procedure Qj_w;
    procedure Qj_k;
    procedure Mallat;
    procedure FilterBank;
    procedure Delay;
    procedure DetectionArchitecture;
    procedure Button1Click(Sender: TObject);
    procedure Button3Click(Sender: TObject);
    procedure Button2Click(Sender: TObject);

  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Form1: TForm1;
  dt                : real;
  fs,max,min        : Integer;
  //--------------- Open File ----------------//
  filename          : TextFile;
  ecg,x1            : array[-100..100000] of Extended;
  ndat              : Integer;

  //--------------- Filter g dan h --------------//
  g,h               : array[-10..100000] of Extended;
  reG,imG,reH,imH   : Extended;
  Hw,Gw             : array[-10..100000] of Extended;
  Q,qj              : array[0..50,-100..100000] of Extended;

  //--------------- Algoritma Mallat ------------//
  w2fm,s2fm         : array[0..10,-10..100000] of Extended;

  //--------------- Filter Bank -----------------//
  w2fb              : array[0..10,-10..100000] of Extended;
  w2fbb1,w2fbb2,w2fbb3,w2fbb4,w2fbb5                  : array[-10..100000] of double;
  w2fb1,w2fb2,w2fb3,w2fb4,w2fb5                       : array[-10..100000] of double;
  i,flagP,tandaP: Integer;
  w2fbbmax1,w2fbbmax2,w2fbbmax3,w2fbbmax4,w2fbbmax5   : Real;
  w2fbmax1,w2fbmax2,w2fbmax3,w2fbmax4,w2fbmax5        : Real;
  w2fbmin1,w2fbmin2,w2fbmin3,w2fbmin4,w2fbmin5        : Real;
  thres1,thres2,thres3,thres4,thres5                  : array[-10..100000] of Extended;//Real;
  thresf1,thresf2,thresf3,thresf4,thresf5             : array[-10..100000] of Extended;  //threshold filter
  thresf1b,thresf2b,thresf3b,thresf4b,thresf5b        : array[-10..100000] of Extended;  //threshold filter


  //--------------- Delay dan Zero Crossing -------------//
  T1,T2,T3,T4,T5                      : Integer;
  Delay1,Delay2,Delay3,Delay4,Delay5  : Integer;
  zcros1,zcros2,zcros3,zcros4,zcros5  : array[-10..100000] of integer;
   zcros1a,zcros2a,zcros3a,zcros4a,zcros5a  : array[-10..100000] of integer;
  zero,k                                : Integer;
                             //: array[0..100000] of Integer;
  pulse1,pulse2,pulse3,pulse4,pulse5  : array[0..100000] of Integer;
  pulseQRS,pulseP,pulseT              : array[0..100000] of Integer;
  notQRS,notT                         : array[0..100000] of Integer;
  hasilP,hasilQRS,hasilT              : array[0..100000] of Integer;
  hasil1,hasil2,hasil3,hasil4,hasil5  : array[0..100000] of Integer;
  eventR,eventT,eventRT,eventP        : array[0..100000] of Integer;
  mavP1,mavP2,pulseventP,simpanP2,simpanPa                : array[0..100000] of real;


  //--------------- MAV -----------------//
  win1, win2, win3, win4, win5        : integer;
  tampung : Double;
  w2fbbmav1,w2fbbmav2,w2fbbmav3,w2fbbmav4,w2fbbmav5,gradien1,gradien2,gradien3,gradien4,gradien5,hasil3mav,hasil3mav2,hasil5mav,hasil5mav2,hasil6   : array[-10..100000] of double;
  w2fbbmav1_2,w2fbbmav2_2,w2fbbmav3_2,w2fbbmav4_2,w2fbbmav5_2   : array[-10..100000] of double;


implementation

{$R *.dfm}


procedure TForm1.Button1Click(Sender: TObject);
var
  i : Integer;
begin
  series3.Clear;
  //dt := 0.0027777;
  fs := 100;//Round(1/dt);
  Edit2.Text := IntToStr(fs);

  if OpenDialog1.Execute then
    begin
      i :=1;
      AssignFile(filename,OpenDialog1.FileName);
      Reset(filename);
      while not Eof(filename) do
        begin
          Readln(filename,i,ecg[i]);
          Inc(i);
        end;
      Dec(i);  //mengurangi jumlah data -1
      CloseFile(filename);
      ndat := i;
      Edit1.Text := IntToStr(ndat);
    end;

    for i:=1 to ndat do
      begin
        Series3.AddXY(i,ecg[i]);
      end;
end;

procedure TForm1.Button3Click(Sender: TObject);
var
  i : Integer;
begin
  k:=0;
  Series4.Clear; Series27.Clear; LineSeries1.Clear;
  if RadioButton1.Checked = True then
    begin
      min := 1;
      max := ndat;
    end
  else if RadioButton2.Checked = True then
    begin
      min := StrToInt(Edit3.Text)*fs;
      max := StrToInt(Edit4.Text)*fs;
    end;

  //plot
  for i:=min to max do
    begin
      series4.AddXY(i,ecg[i]);
      Series27.AddXY(i,ecg[i]);
      LineSeries1.AddXY(i,ecg[i]);
    end;
end;


procedure TForm1.Button2Click(Sender: TObject);
begin
  //fs := StrToInt(Edit2.Text);
  koef_filter_hg;
  respon_frekuensi_hg;
  Qj_w;
  Qj_k;
  Mallat;
  FilterBank;
  Delay;
  DetectionArchitecture;
end;

function TForm1.Dirac(x:Integer):Integer;
var
  DiracDelta : Integer;
begin
  if (x=0) then DiracDelta := 1
  else DiracDelta := 0;

  Result := DiracDelta;
end;

procedure TForm1.koef_filter_hg;
var
  n : Integer;
begin
  BarSeries1.Clear; Series16.Clear;

  for n:=-2 to 1 do
    begin
      h[n] := 1/8*(dirac(n-1) + 3*dirac(n) + 3*dirac(n+1) + dirac(n+2));
      g[n] := -2*(Dirac(n) - dirac(n+1));

      BarSeries1.AddXY(n,g[n]);
      Series16.AddXY(n,h[n]);
    end;

end;

procedure TForm1.respon_frekuensi_hg;
var
  i,k : Integer;
begin
  for i:=0 to fs do
    begin
      reH := 0;
      imH := 0;
      reG := 0;
      imG := 0;
      for k:=-1 to 2 do
        begin
          reG := reG + g[k]*cos(k*2*pi*i/fs);
          imG := imG - g[k]*sin(k*2*pi*i/fs);
          reH := reH + h[k]*cos(k*2*pi*i/fs);
          imH := imH - h[k]*sin(k*2*pi*i/fs);
        end;
      Hw[i] := Sqrt(Sqr(reH)+sqr(imH));
      Gw[i] := Sqrt(Sqr(reG)+sqr(imG));
    end;

    Series5.Clear; Series6.Clear;
    for i:=0 to Round(fs/2) do
      begin
        Series5.AddXY(i,Hw[i]);
        Series6.AddXY(i,Gw[i]);
      end;
end;

procedure TForm1.Qj_w;
var
  i : Integer;
begin
  Series7.Clear; Series8.Clear; Series9.Clear;
  Series10.Clear; Series11.Clear;
  Series35.clear; Series36.Clear; Series37.Clear;

  for i:=0 to Round(fs/2) do
    begin
      Q[1,i] := Gw[i];
      Q[2,i] := Gw[2*i]*Hw[i];
      Q[3,i] := Gw[4*i]*Hw[2*i]*Hw[i];
      Q[4,i] := Gw[8*i]*Hw[4*i]*Hw[2*i]*Hw[i];
      Q[5,i] := Gw[16*i]*Hw[8*i]*Hw[4*i]*Hw[2*i]*Hw[i];
      Q[6,i] := Gw[32*i]*Hw[16*i]*Hw[8*i]*Hw[4*i]*Hw[2*i]*Hw[i];
      Q[7,i] := Gw[64*i]*Hw[32*i]*Hw[16*i]*Hw[8*i]*Hw[4*i]*Hw[2*i]*Hw[i];
      Q[8,i] := Gw[128*i]*Hw[64*i]*Hw[32*i]*Hw[16*i]*Hw[8*i]*Hw[4*i]*Hw[2*i]*Hw[i];


      Series7.AddXY(i,Q[1,i]);
      Series8.AddXY(i,Q[2,i]);
      Series9.AddXY(i,Q[3,i]);
      Series10.AddXY(i,Q[4,i]);
      Series11.AddXY(i,Q[5,i]);
      Series35.AddXY(i,Q[6,i]);
      Series36.AddXY(i,Q[7,i]);
      Series37.AddXY(i,Q[8,i]);

    end;
end;


procedure TForm1.Qj_k;
var
  i,j,k : Integer;
begin
  Series12.Clear; Series13.Clear; Series14.Clear; Series15.Clear; Series2.Clear;

  j:=1;
  for k:=-(round(power(2,j))+round(power(2,j-1))-2) to -(1-round(power(2,j-1))) do
    begin
      qj[1,k] := -2*(dirac(k)-dirac(k+1));
      series12.AddXY(k,qj[1,k]);
    end;

  j:=2;
  for k:=-(round(power(2,j))+round(power(2,j-1))-2) to -(1-round(power(2,j-1))) do
    begin
      qj[2,k] := -1/4*(dirac(k-1) + 3*dirac(k) + 2*dirac(k+1) - 2*dirac(k+2)
                      - 3*dirac(k+3) - dirac(k+4));
      series13.AddXY(k,qj[2,k]);
    end;

  j:=3;
  for k:=-(round(power(2,j))+round(power(2,j-1))-2) to -(1-round(power(2,j-1))) do
    begin
      qj[3,k] := -1/32*(dirac(k-3) + 3*dirac(k-2) + 6*dirac(k-1) + 10*dirac(k) + 11*dirac(k+1)
                       + 9*dirac(k+2) + 4*dirac(k+3) - 4*dirac(k+4) - 9*dirac(k+5) - 11*dirac(k+6)
                       - 10*dirac(k+7) - 6*dirac(k+8) - 3*dirac(k+9) - dirac(k+10));
      series14.AddXY(k,qj[3,k]);
    end;

  j:=4;
  for k:=-(round(power(2,j))+round(power(2,j-1))-2) to -(1-round(power(2,j-1))) do
    begin
      qj[4,k] := -1/256*(dirac(k-7) + 3*dirac(k-6) + 6*dirac(k-5) + 10*dirac(k-4) + 15*dirac(k-3)
                        + 21*dirac(k-2) + 28*dirac(k-1) + 36*dirac(k) + 41*dirac(k+1) + 43*dirac(k+2)
                        + 42*dirac(k+3) + 38*dirac(k+4) + 31*dirac(k+5) + 21*dirac(k+6) + 8*dirac(k+7)
                        - 8*dirac(k+8) - 21*dirac(k+9) - 31*dirac(k+10) - 38*dirac(k+11) - 42*dirac(k+12)
                        - 43*dirac(k+13) - 41*dirac(k+14) - 36*dirac(k+15) - 28*dirac(k+16) - 21*dirac(k+17)
                        - 15*dirac(k+18) - 10*dirac(k+19) - 6*dirac(k+20) - 3*dirac(k+21) - dirac(k+22));
      series15.AddXY(k,qj[4,k]);
    end;

  j:=5;
  for k:=-(round(power(2,j))+round(power(2,j-1))-2) to -(1-round(power(2,j-1))) do
    begin
      qj[5,k] := -1/(512)*(dirac(k-15) + 3*dirac(k-14) + 6*dirac(k-13) + 10*dirac(k-12) + 15*dirac(k-11) + 21*dirac(k-10)
                        + 28*dirac(k-9) + 36*dirac(k-8) + 45*dirac(k-7) + 55*dirac(k-6) + 66*dirac(k-5) + 78*dirac(k-4)
                        + 91*dirac(k-3) + 105*dirac(k-2) + 120*dirac(k-1) + 136*dirac(k) + 149*dirac(k+1) + 159*dirac(k+2)
                        + 166*dirac(k+3) + 170*dirac(k+4) + 171*dirac(k+5) + 169*dirac(k+6) + 164*dirac(k+7) + 156*dirac(k+8)
                        + 145*dirac(k+9) + 131*dirac(k+10) + 114*dirac(k+11) + 94*dirac(k+12) + 71*dirac(k+13) + 45*dirac(k+14)
                        + 16*dirac(k+15) - 16*dirac(k+16) - 45*dirac(k+17) - 71*dirac(k+18) - 94*dirac(k+19) - 114*dirac(k+20)
                        - 131*dirac(k+21) - 145*dirac(k+22) - 156*dirac(k+23) - 164*dirac(k+24) - 169*dirac(k+25)
                        - 171*dirac(k+26) - 170*dirac(k+27) - 166*dirac(k+28) - 159*dirac(k+29) - 149*dirac(k+30)
                        - 136*dirac(k+31) - 120*dirac(k+32) - 105*dirac(k+33) - 91*dirac(k+34) - 78*dirac(k+35)
                        - 66*dirac(k+36) - 55*dirac(k+37) - 45*dirac(k+38) - 36*dirac(k+39) - 28*dirac(k+40)
                        - 21*dirac(k+41) - 15*dirac(k+42) - 10*dirac(k+43) - 6*dirac(k+44) - 3*dirac(k+45)
                        - dirac(k+46));
      series2.AddXY(k,qj[5,k]);
    end;

end;

procedure TForm1.Delay;
begin
  T1 := round(power(2, (1-1))) - 1; Edit5.Text := IntToStr(T1);
  T2 := round(power(2, (2-1))) - 1; Edit6.Text := IntToStr(T2);
  T3 := round(power(2, (3-1))) - 1; Edit7.Text := IntToStr(T3);
  T4 := round(power(2, (4-1))) - 1; Edit8.Text := IntToStr(T4);
  T5 := round(Power(2, (5-1))) - 1; Edit9.Text := IntToStr(T5);

  Delay1 := T5 - T1; Edit10.Text := IntToStr(Delay1);
  Delay2 := T5 - T2; Edit11.Text := IntToStr(Delay2);
  Delay3 := T5 - T3; Edit12.Text := IntToStr(Delay3);
  Delay4 := T5 - T4; Edit13.Text := IntToStr(Delay4);
  Delay5 := T5 - T5; Edit14.Text := IntToStr(Delay5);
end;


procedure TForm1.Mallat;
var
  n,j,k : Integer;
begin
  Series17.Clear; Series18.Clear; Series19.Clear; Series20.Clear; Series21.Clear;
  Series22.Clear; Series23.Clear; Series24.Clear; Series25.Clear; Series26.Clear;
  //Chart14.Series.    //Legend.CheckBoxes
  for n:=min to max do
    begin
      for j:=1 to 5 do
        begin
          //tj[j] := Power(2,j-1)-1;
          w2fm[j,n] := 0;
          s2fm[j,n] := 0;
          for k:=-1 to 2 do
            begin
              w2fm[j,n] := w2fm[j,n] + g[k]*ecg[Round(n-power(2,j-1)*k)];
              s2fm[j,n] := s2fm[j,n] + h[k]*ecg[Round(n-power(2,j-1)*k)];
            end;

        end;
      Series17.AddXY(n,w2fm[1,n]);
      Series18.AddXY(n,w2fm[2,n]);
      Series19.AddXY(n,w2fm[3,n]);
      Series20.AddXY(n,w2fm[4,n]);
      Series21.AddXY(n,w2fm[5,n]);

      Series22.AddXY(n,s2fm[1,n]);
      Series23.AddXY(n,s2fm[2,n]);
      Series24.AddXY(n,s2fm[3,n]);
      Series25.AddXY(n,s2fm[4,n]);
      Series26.AddXY(n,s2fm[5,n]);
    end;

end;

procedure TForm1.FilterBank;
var
  n,j,k : Integer;
begin
  Series28.Clear; Series29.Clear; Series30.Clear; Series31.Clear; Series32.Clear;
  Series33.Clear; Series44.Clear; Series45.Clear; Series46.Clear; Series34.Clear;
  Delay;

  //---------- Filter bank ---------------//
    for n:=min to max do
    begin
      for j:=1 to 5 do
        begin
          w2fb[1,n+T1] := 0;
          w2fb[2,n+T2] := 0;
          w2fb[3,n+T3] := 0;
          w2fb[4,n+T4] := 0;
          w2fb[5,n+T5] := 0;
          for k:=-(round(power(2,j))+round(power(2,j-1))-2) to -(1-round(power(2,j-1))) do
            begin
              w2fb[1,n+T1] := w2fb[1,n+T1]+qj[1,k]*ecg[n-k];
              w2fb[2,n+T2] := w2fb[2,n+T2]+qj[2,k]*ecg[n-k];
              w2fb[3,n+T3] := w2fb[3,n+T3]+qj[3,k]*ecg[n-k];
              w2fb[4,n+T4] := w2fb[4,n+T4]+qj[4,k]*ecg[n-k];
              w2fb[5,n+T5] := w2fb[5,n+T5]+qj[5,k]*ecg[n-k];
            end;
        end;

      Series28.AddXY(n,w2fb[1,n]);
      Series29.AddXY(n,w2fb[2,n]);
      Series30.AddXY(n,w2fb[3,n]);
      Series31.AddXY(n,w2fb[4,n]);
      Series32.AddXY(n,w2fb[5,n]);

      Series40.AddXY(n,w2fb[1,n]);
      Series41.AddXY(n,w2fb[2,n]);
      Series42.AddXY(n,w2fb[3,n]);
      Series43.AddXY(n,w2fb[4,n]);
      Series78.AddXY(n,w2fb[5,n]);

     // Series33.AddXY(n,ecg[n]);
      Series39.AddXY(n,ecg[n]);
      Series44.AddXY(n,ecg[n]);
      Series45.AddXY(n,ecg[n]);
      Series46.AddXY(n,ecg[n]);
      Series34.AddXY(n,ecg[n]);
    end;

   for n:=min to max do
    begin
      for j:=1 to 5 do
        begin
          w2fb1[n] := (w2fb[1,n]);
          w2fb2[n] := (w2fb[2,n]);
          w2fb3[n] := (w2fb[3,n]);
          w2fb4[n] := (w2fb[4,n]);
          w2fb5[n] := (w2fb[5,n]);
        end;
    end;

   w2fbmax1 := MaxValue(w2fb1);
   w2fbmax2 := MaxValue(w2fb2);
   w2fbmax3 := MaxValue(w2fb3);
   w2fbmax4 := MaxValue(w2fb4);
   w2fbmax5 := MaxValue(w2fb5);

   w2fbmin1 := MinValue(w2fb1);
   w2fbmin2 := MinValue(w2fb2);
   w2fbmin3 := MinValue(w2fb3);
   w2fbmin4 := MinValue(w2fb4);
   w2fbmin5 := MinValue(w2fb5);

   Series47.clear; Series48.Clear; Series49.clear; Series50.Clear; Series51.Clear; //threshold atas
   Series64.clear; Series65.Clear; Series66.Clear; Series67.Clear; Series68.Clear; //threshold bawah
   Series52.Clear; Series53.clear; Series54.Clear; Series55.clear; Series56.Clear;
   Series57.Clear; Series58.Clear; Series59.clear; Series60.Clear; Series61.Clear;
   Series70.Clear; Series71.clear; //deteksi T

   //------------- deteksi maxima dan minima dari pair of peaks ------------//
    for n:=min to max do
    begin
         gradien1[n]:=w2fb1[n-1]-w2fb1[n+1];
         gradien2[n]:=w2fb2[n-2]-w2fb2[n+2];
         gradien3[n]:=w2fb3[n-3]-w2fb3[n+3];
         gradien4[n]:=w2fb4[n-4]-w2fb4[n+4];
         gradien5[n]:=w2fb5[n-5]-w2fb5[n+5];

         if gradien1[n] >0.7 then
         begin
           hasil1[n]:=1;
         end
         else
         begin
           hasil1[n]:=0;
         end;

         if gradien2[n] >0.7 then
         begin
           hasil2[n]:=1;
         end
         else
         begin
           hasil2[n]:=0;
         end;

         if gradien3[n] >0.7 then
         begin
           hasil3[n]:=1;
         end
         else
         begin
           hasil3[n]:=0;
         end;

         if gradien4[n] >0.1 then
         begin
           hasil4[n]:=1;
         end
         else
         begin
           hasil4[n]:=0;
         end;

         if gradien5[n] >0.7 then
         begin
           hasil5[n]:=1;
         end
         else
         begin
           hasil5[n]:=0;
         end;

         //hasilP[n] := hasil4[n] - hasil1[n] - hasil2[n] - hasil3[n] - hasil5[n];
         Series52.AddXY(n,gradien1[n]);
         Series53.AddXY(n,gradien2[n]);
         Series54.AddXY(n,gradien3[n]);
         Series55.AddXY(n,gradien4[n]);
         Series56.AddXY(n,gradien5[n]);
    end;


    //-------- deteksi pulse QRS dan T ----------------//
    for n:=min to max do
    begin
         hasilQRS[n] := hasil1[n] or hasil2[n] or hasil3[n];
         hasilT[n]   := hasil5[n];

         Series64.AddXY(n,hasil1[n]);
         Series65.AddXY(n,hasil2[n]);
         Series66.AddXY(n,hasil3[n]);

         LnsrsSeries78.addxy(n,hasilQRS[n]);

         LnsrsSeries38.addxy(n,hasilT[n]);

         //Series38.AddXY(n,hasilP[n]);

         Series67.AddXY(n,hasil4[n]);
         Series68.AddXY(n,hasil5[n]);
    end;

   //--------- zero crossing wavelet 1 - 5 ------------------//
   for n:=min to max do
   begin
          if (w2fb1[n-1]>=0.3) and (w2fb1[n]<=-0.3) then
          begin
            zcros1[n]:=2;
          end
          else
          begin
            zcros1[n]:=0;
          end;

          if (w2fb2[n-1]>=0.1) and (w2fb2[n]<=-0.1) then
          begin
            zcros2[n]:=2;

          end
          else
          begin
            zcros2[n]:=0;
          end;

          if (w2fb3[n-1]>=0.1) and (w2fb3[n]<=-0.1) then
          begin
            zcros3[n]:=2;
          end
          else
          begin
            zcros3[n]:=0;
          end;

          if (w2fb4[n-1]>0) and (w2fb4[n]<0) then
          begin
            zcros4[n]:=1;
          end
          else
          begin
            zcros4[n]:=0;
          end;

        if (w2fb5[n-1]>0) and (w2fb5[n]<0) then
          begin
            zcros5[n]:=2;
          end
        else
          begin
            zcros5[n]:=0;
          end;

      Series57.AddXY(n,ecg[n]);
      Series58.AddXY(n,ecg[n]);
      Series59.AddXY(n,ecg[n]);
      Series60.AddXY(n,ecg[n]);
      Series61.AddXY(n,ecg[n]);

      Series79.AddXY(n,zcros1[n]);
      Series80.AddXY(n,zcros2[n]);
      Series81.AddXY(n,zcros3[n]);
      Series82.AddXY(n,zcros4[n]);
      Series83.AddXY(n,zcros5[n]);
   end;

   //---------- Deteksi P ---------------//
    for n:=min to max do
    begin
      eventR[n] := zcros4[n] and hasilQRS[n];
      eventT[n] := zcros4[n] and hasilT[n];
      eventRT[n]:= eventR[n] or eventT[n];
      eventP[n] := zcros4[n] xor eventRT[n];

      pulseventP[n] := eventP[n] or hasil4[n];

      Series73.AddXY(n,hasil4[n]);
      Series69.AddXY(n,zcros4[n]);
      Series70.AddXY(n,hasilQRS[n]);
      Series71.AddXY(n,eventR[n]);
      Series72.AddXY(n,hasilT[n]);
      Series62.AddXY(n,eventT[n]);
      Series63.AddXY(n,eventRT[n]);
      Series74.AddXY(n,eventP[n]);

    end;

    for n:=min to max do
    begin

      simpanP2[n]:=0;
      

      if flagP=0 then
      begin
        if pulseventP[n]=1 then
        begin

          k:=k+1;
          if eventP[n]=1 then
          begin
            tandaP:=1;
          end
          else
          begin
             tandaP:=2;
          end;

        end
        else
        begin

          if tandaP=1 then
          begin
            flagP:=1;
          end
          else
          begin
             flagP:=2;
          end;

        end;
      end;

      if flagP=1 then
      begin
         for i:=0 to k do
         begin
             simpanP2[n+i-k]:=1;
         end;
         flagP:=0;
         k:=0;
      end;
      if flagP=2 then
      begin
         for i:=0 to k do
         begin
             simpanP2[n+i-k]:=0;
         end;
         flagP:=0;
          k:=0;
      end;

    end;

    for n:=min to max do
    begin
        simpanPa[n]:= pulseventP[n] * simpanP2[n];

        Series84.AddXY(n,ecg[n]);
        Series77.AddXY(n,ecg[n]);
        Series75.AddXY(n,simpanP2[n]);
        Series76.AddXY(n,simpanPa[n]);

        LnsrsSeries79.addxy(n,simpanP2[n]);

    end;

  //--------- deteksi P-QRS-T ---------//
  {Series62.clear; Series63.Clear;
  Series69.Clear; Series72.Clear; Series73.clear;
  for n:=min to max do
    begin



      pulseQRS[n] := pulse1[n] and pulse2[n] and pulse3[n];// and pulse4[n] and pulse5[n];
      Series62.AddXY(n,pulseQRS[n]);
      Series63.AddXY(n,ecg[n]);

      pulseT[n] := pulse4[n] and pulse5[n];
      Series69.AddXY(n,(1 - pulseQRS[n]));
      Series72.AddXY(n,pulseT[n]);
      Series73.AddXY(n,ecg[n]);

      pulseP[n] := pulse4[n];
    end;    }
end;


procedure TForm1.DetectionArchitecture;
var
  n,j,k,i : Integer;
  temp    : Real;
begin
 // LineSeries2.Clear; LineSeries3.Clear; LineSeries4.Clear;
 // LineSeries5.Clear; LineSeries6.Clear;

 // Series38.Clear; Series39.Clear; Series40.Clear; Series41.Clear; Series42.Clear;
 // Series43.Clear;
  {
  for n:=min to max do
    begin
        //for j:=1 to 1 do
        //begin
          //if (w2fb[j,n-1]<0) and (w2fb[j,n+1]>0) and (w2fb[j,n]=0) then
         { if ((w2fb[j,n-1]<0) and (w2fb[j,n+1]>0)) or ((w2fb[j,n-1]>0) and (w2fb[j,n+1]<0))then
          begin
              zcros[j,n] := 1;//w2fb[j,n];
               Series33.AddXY(n,zcros[1,n]);
          end
        }
        {  else if (w2fb[j,n-1]>0) and (w2fb[j,n+1]<0) and (w2fb[j,n]=0)then
          begin
              zcros[j,n] := 1;//w2fb[j,n];
          end
          }
          //else zcros[j,n] := 0;

       // end;
         { j:=4;
          if ((w2fb[j,n-1]<-0.006) and (w2fb[j,n+1]>0.006)) or ((w2fb[j,n-1]>0.006) and (w2fb[j,n+1]<-0.006))then
          begin
              zcros[j,n] := 0;//w2fb[j,n];
              //Series34.AddXY(n,zcros[j,n]);
          end
    end;  }


  for n:=1 to ndat do
    begin
      for j:=1 to 5 do
        begin
          w2fbb1[n] := abs(w2fb[1,n]);
          w2fbb2[n] := abs(w2fb[2,n]);
          w2fbb3[n] := abs(w2fb[3,n]);
          w2fbb4[n] := abs(w2fb[4,n]);
          w2fbb5[n] := abs(w2fb[5,n]);
        end;

    end;

   win1 := 10;
   for i:=0 to win1-1 do
    begin
      w2fbb1[-i] := w2fbb1[1];
    end;

   for i:=1 to ndat do
    begin
      temp := 0;
      for n:=0 to win1-1 do
        begin
          temp := temp + w2fbb1[i-n];
        end;
      w2fbbmav1[i] := temp/win1;
    end;
   for i:=ndat downto 1 do
    begin
      temp := 0;
      for n:=0 to win1-1 do
        begin
          temp := temp + w2fbbmav1[i+n];
        end;
      w2fbbmav1_2[i] := temp/win1;
    end;

    w2fbbmax1 := MaxValue(w2fbb1);
    w2fbbmax2 := MaxValue(w2fbb2);
    w2fbbmax3 := MaxValue(w2fbb3);
    w2fbbmax4 := MaxValue(w2fbb4);
    w2fbbmax5 := MaxValue(w2fbb5);

    for n:=min to max do
    begin



    end;

  //------tampilan------//
  for n:=min to max do
    begin
      {
      LineSeries2.AddXY(n,w2fbb1[n]);
      LineSeries3.AddXY(n,w2fbb2[n]);
      LineSeries4.AddXY(n,w2fbb3[n]);
      LineSeries5.AddXY(n,w2fbb4[n]);
      LineSeries6.AddXY(n,w2fbb5[n]);

      Series43.AddXY(n,w2fbbmav1_2[n]);
      }
      {
      Series38.AddXY(n,thres1[n]);
      Series39.AddXY(n,thres2[n]);
      Series40.AddXY(n,thres3[n]);
      Series41.AddXY(n,thres4[n]);
      Series42.AddXY(n,thres5[n]); }
       {
      Series38.AddXY(n,ecg[n]);
      Series39.AddXY(n,ecg[n]);
      Series40.AddXY(n,ecg[n]);
      Series41.AddXY(n,ecg[n]);
      Series42.AddXY(n,ecg[n]);
         }

    end;




end;


end.